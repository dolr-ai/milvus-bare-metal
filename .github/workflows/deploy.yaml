name: Deploy Milvus to Hetzner bare metal server

on:
  workflow_run:
    workflows: ["Validate Milvus Configuration"]
    types:
      - completed
  workflow_dispatch:

concurrency:
  group: deploy-hetzner-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare:
    name: Prepare server matrix
    runs-on: ubuntu-latest
    outputs:
      server_matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set server matrix
        id: set-matrix
        run: |
          # Get server IPs from environment variable
          SERVER_IPS="${{ vars.HETZNER_BARE_METAL_DEPLOY_TARGET_SERVER_IPS }}"

          if [[ -z "$SERVER_IPS" ]]; then
            echo "Error: No server IPs provided. Set HETZNER_BARE_METAL_DEPLOY_TARGET_SERVER_IPS environment variable."
            exit 1
          fi

          # Convert comma-separated IPs to JSON array
          IFS=',' read -ra ADDR <<< "$SERVER_IPS"
          MATRIX="["
          for i in "${ADDR[@]}"; do
            IP=$(echo "$i" | xargs)  # trim whitespace
            if [[ -n "$IP" ]]; then
              MATRIX="$MATRIX\"$IP\","
            fi
          done
          MATRIX="${MATRIX%,}]"  # remove trailing comma and close array

          echo "Server matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Hetzner bare metal
    runs-on: ubuntu-latest

    strategy:
      matrix:
        server_ip: ${{ fromJson(needs.prepare.outputs.server_matrix) }}
      fail-fast: false

    needs: prepare

    steps:
      - name: Clone the repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_BARE_METAL_GITHUB_ACTIONS_SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ matrix.server_ip }} >> ~/.ssh/known_hosts

      - name: Check server connectivity
        run: |
          ssh -o ConnectTimeout=10 root@${{ matrix.server_ip }} "echo 'Server connection successful'"

      - name: Sync deployment files to server
        run: |
          rsync -avz --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'README.md' \
            ./ \
            root@${{ matrix.server_ip }}:/opt/milvus/

      - name: Configure Milvus credentials
        run: |
          ssh root@${{ matrix.server_ip }} "
            cd /opt/milvus
            echo 'Configuring Milvus credentials...'
            cat > .env << 'EOF'
          MILVUS_ROOT_PASSWORD=${{ secrets.MILVUS_ROOT_PASSWORD }}
          EOF
            chmod 600 .env
            echo 'Milvus credentials configured successfully'
          "

      - name: Deploy Milvus with Docker Compose
        run: |
          ssh root@${{ matrix.server_ip }} "
            cd /opt/milvus
            echo 'Pulling latest images...'
            docker compose pull
            echo 'Starting Milvus services...'
            docker compose up -d
            echo 'Waiting for services to be healthy...'
            sleep 15
            docker compose ps
          "

      - name: Verify deployment
        run: |
          ssh root@${{ matrix.server_ip }} "
            cd /opt/milvus
            echo '=== Docker Containers Status ==='
            docker compose ps
            echo ''
            echo '=== Checking Service Health ==='
            docker compose exec -T standalone curl -f http://localhost:9091/healthz || echo 'Milvus not yet healthy'
            echo ''
            echo '=== Container Logs (last 10 lines) ==='
            docker compose logs --tail=10
            echo ''
            echo 'Deployment verification completed'
          "

      # - name: Check Milvus services and logs
      #   run: |
      #     ssh root@${{ matrix.server_ip }} "
      #       echo '=== Milvus Firewall Setup Logs ==='
      #       journalctl -u milvus-firewall-setup.service --no-pager -n 50
      #       echo ''
      #       echo '=== Milvus SSL Setup Logs ==='
      #       journalctl -u milvus-ssl-setup.service --no-pager -n 100
      #       echo ''
      #       echo '=== Nginx Service Status ==='
      #       systemctl status nginx.service --no-pager || true
      #       echo ''
      #       echo '=== Nginx Logs ==='
      #       journalctl -u nginx.service --no-pager -n 30
      #       echo ''
      #       echo '=== Milvus Container Services Status ==='
      #       systemctl status milvus-etcd.service --no-pager || true
      #       systemctl status milvus-minio.service --no-pager || true
      #       systemctl status milvus-standalone.service --no-pager || true
      #       echo ''
      #       echo '=== Running Containers ==='
      #       podman ps -a
      #       echo ''
      #       echo '=== Network Ports ==='
      #       ss -tlnp | grep -E ':(80|443|19530|9091)' || echo 'No ports listening'
      #       echo ''
      #       echo '=== Firewall Status ==='
      #       firewall-cmd --list-all || echo 'Firewall not active'
      #       echo ''
      #       echo '=== SSL Certificate Check ==='
      #       ls -lah /etc/ssl/milvus/ || echo 'SSL directory not found'
      #       echo ''
      #       echo '=== Nginx Config Test ==='
      #       nginx -t || echo 'Nginx config test failed'
      #     "

      - name: Deployment summary
        run: |
          echo "## Deployment Summary for ${{ matrix.server_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Server**: ${{ matrix.server_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Method**: Docker Compose (rsync)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Services**: Milvus, etcd, MinIO, Caddy (all containerized)" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Path**: /opt/milvus" >> $GITHUB_STEP_SUMMARY
